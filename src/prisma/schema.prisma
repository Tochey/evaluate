generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Student {
  sid         String       @id @default(uuid())
  email       String       @unique
  username    String       @unique
  fullName    String
  password    String
  role        ROLE         @default(STUDENT)
  isEnabled   Boolean      @default(false)
  isVerified  Boolean      @default(false)
  createdAt   DateTime     @default(now())
  courses     Course[]
  submissions Submission[]

  @@index([sid])
}

model faculty {
  fid       String   @id @default(uuid())
  facultyId String   @unique
  fullName  String
  role      ROLE     @default(FACULTY)
  createdAt DateTime @default(now())
  password  String
  isAdmin   Boolean  @default(false)
  courses   Course[]

  @@index([fid])
}

model Course {
  courseId           String             @id @default(uuid())
  major              String             @default("Computer Science")
  coursename         String             @unique
  academicyear       String
  academicterm       String
  createdAt          DateTime           @default(now())
  accessCode         String             @unique @default(uuid())
  students           Student[]
  instructor         faculty            @relation(fields: [instructorId], references: [fid], onDelete: Cascade)
  activities         Activity[]
  learningObjectives LearningObjective?
  instructorId       String

  @@index([courseId])
}

model LearningObjective {
  learningObjId String    @id @default(uuid())
  description   String
  course        Course?   @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  courseId      String?   @unique
  activity      Activity? @relation(fields: [activityId], references: [activityId], onDelete: Cascade)
  activityId    String?

  @@index([learningObjId])
}

model Activity {
  activityId         String              @id @default(uuid())
  topic              String              @unique
  points             Int                 @default(10)
  numofattempts      Int                 @default(1)
  availablefrom      DateTime            @default(now())
  availableto        String             // we send due date to backend as string
  course             Course              @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  courseId           String
  learningObjectives LearningObjective[]
  codingActivity     CodingActivity?

  @@index([activityId])
}

model CodingActivity {
  codingactivityId String              @id @default(uuid())
  question         String              @unique
  language         ProgrammingLanguage
  submissions      Submission[]
  actitvity        Activity            @relation(fields: [activityId], references: [activityId], onDelete: Cascade)
  activityId       String              @unique
  testCases     String              @db.LongText
}

model Submission {
  submissionId             String                @id @default(uuid())
  sumbittedAt              DateTime              @default(now())
  score                    String                @db.LongText
  isLate                   Boolean?              @default(false)
  student                  Student               @relation(fields: [studentid], references: [sid], onDelete: Cascade)
  studentid                String
  sourceCode               String                @db.LongText
  codingActitvySubmissions CodingActivity        @relation(fields: [codingActivityId], references: [codingactivityId], onDelete: Cascade)
  codingActivityId         String
  CodingActivityMetric     CodingActivityMetric?

  @@index([submissionId])
}

model CodingActivityMetric {
  activityMetricId String     @id @default(uuid())
  timeSpent        Int
  runCount         Int
  //timen between run and submit
  submission       Submission @relation(fields: [submissionId], references: [submissionId])
  submissionId     String     @unique
}

model StudentMetric {
  studentMetricId String   @id @default(uuid())
  lastLogin       DateTime @default(now())
  lastLogout      DateTime @default(now())
}

enum ROLE {
  STUDENT
  FACULTY
}

enum ProgrammingLanguage {
  JAVA
  PYTHON
}

// Relationships => {
// * A Student can take many courses, Many courses can be taken by many students (M - M) -
// * A Student can have many submissions, Many submission can belong to only one student (1 - M) - 
// * A Faculty can teach many courses, Many courses can be taught by one faculty (1 - M) - 
// * A Course can have many activities, Many activities can be linked to one course (1- M) - 
// * A Course can have many LO's, Many LO's can be linked one course ( 1 - M) -
// * An Activity can have many LO's, Many LO's can be linked to an activity (1 - M) -
// * An Activity can have one codingActivity, One codingActivity can be linked to on activity (1 - 1) -
// * A codingActivity can have many submissions, Many submission can be linked to a codingActivity (1 - M )
// student metric not documented
// }

// . GRADING 
// include late submission, f
